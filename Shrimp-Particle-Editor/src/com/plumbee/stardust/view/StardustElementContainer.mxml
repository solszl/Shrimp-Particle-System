<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark">

    <fx:Script><![CDATA[
		import com.plumbee.stardust.helpers.DropdownListVO;
		import com.shrimp.extensions.particle.common.StardustElement;
		
		import mx.collections.ArrayCollection;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;

        [Bindable]
        private var _dataProviderAC : ArrayCollection;
        public function set dataProviderAC(ac : ArrayCollection) : void
        {
            _dataProviderAC = ac;
            _dataProviderAC.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshDropdownList);
        }

        [Bindable]
        private var _dropdownListAC : ArrayCollection;
        public function set dropdownListAC(ac : ArrayCollection) : void
        {
            _dropdownListAC = ac;
            _dropdownListAC.filterFunction = dropDownFilterFunction;
        }

        [Bindable]
        private var _dataproviderDict : Dictionary;
        public function set dataproviderDict(dict : Dictionary) : void
        {
            _dataproviderDict = dict;
        }

        public function set label(s : String) : void
        {
            containerLabel.text = s;
        }

        private function listIRFunction(item : Object) : IFactory
        {
            return new ClassFactory(DropdownListVO(_dataproviderDict[item.constructor]).viewClass);
        }

        private function addItem() : void
        {
            var cl : Class = DropdownListVO(dropdownList.selectedItem).stardustClass;
            var instance : StardustElement = StardustElement(new cl());
            _dataProviderAC.addItem(instance);
            _dropdownListAC.refresh();
            // flex bugfix: if one adds the last item, the selectedItem will be null.
            if (_dropdownListAC.length > 0)
            {
                dropdownList.selectedItem = _dropdownListAC.getItemAt(0);
            }
        }

        private function dropDownFilterFunction(item : Object) : Boolean
        {
            for (var i : int = 0; i < _dataProviderAC.length; i++)
            {
                if (_dataProviderAC.getItemAt(i) is DropdownListVO(item).stardustClass)
                {
                    return false;
                }
            }
            return true;
        }

        private function refreshDropdownList(e : CollectionEvent) : void
        {
            _dropdownListAC.refresh(); // this executes the filterfunction
            // bugfix: if _dropdownListAC's lenght changes from 0 to 1 the ddl will have no selection
            if (e.kind == CollectionEventKind.REMOVE && _dropdownListAC.length > 0)
            {
                dropdownList.selectedItem = _dropdownListAC.getItemAt(0);
            }
            if (e.kind == CollectionEventKind.RESET)
            {
                //flex hack to refresh the list to fix a bug with the data getting set in the item renderers getting out of sync
                //(StarlingDisplayObjectClass going to the VelocityInitializer instead of the VelocityClass etc).
                list.itemRendererFunction = null;
                list.itemRendererFunction = listIRFunction;
            }

        }
        ]]></fx:Script>

    <s:HGroup verticalAlign="middle" width="100%">
        <s:Label id="containerLabel" fontSize="14" fontWeight="bold"/>
        <s:DropDownList id="dropdownList" labelField="name"
                        dataProvider="{_dropdownListAC}" requireSelection="true"
                        selectedIndex="0" width="220"/>
        <s:Button label="Add" click="addItem()" enabled="{dropdownList.selectedItem}"/>
    </s:HGroup>
    <s:List height="100%" width="100%" id="list"
            itemRendererFunction="listIRFunction"
            dataProvider="{_dataProviderAC}"
            useVirtualLayout="false"/>

</s:VGroup>
