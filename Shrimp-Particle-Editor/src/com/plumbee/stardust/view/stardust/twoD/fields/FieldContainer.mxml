<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
          preinitialize="init()" width="100%">

    <fx:Metadata>
        [Event(name="change", type="flash.events.Event")]
    </fx:Metadata>
    <fx:Script><![CDATA[
		import com.plumbee.stardust.helpers.DropdownListVO;
		import com.shrimp.extensions.particle.twoD.fields.BitmapField;
		import com.shrimp.extensions.particle.twoD.fields.Field;
		import com.shrimp.extensions.particle.twoD.fields.RadialField;
		import com.shrimp.extensions.particle.twoD.fields.UniformField;
		
		import mx.collections.ArrayCollection;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;

        private const fieldsAC : ArrayCollection = new ArrayCollection();
        private static const fieldDict : Dictionary = new Dictionary();
        private static const fieldDDLAC : ArrayCollection = new ArrayCollection();
        [Bindable]
        private var _hasOnlyOneField : Boolean = false;

        private function init() : void
        {
            if (fieldDDLAC.length == 0)
            {
                fieldDict[ UniformField ] = new DropdownListVO("Uniform", UniformField, UniformFieldRenderer);
                fieldDict[ RadialField ] = new DropdownListVO("Radial", RadialField, RadialFieldRenderer);
                fieldDict[ BitmapField ] = new DropdownListVO("Bitmap", BitmapField, BitmapFieldRenderer);
                for each (var ddlVO : DropdownListVO in fieldDict)
                {
                    fieldDDLAC.addItem(ddlVO);
                }
            }
            fieldDropdownList.selectedIndex = 0;
            fieldsAC.addEventListener(CollectionEvent.COLLECTION_CHANGE, onFieldsACChange);
        }

        private function onFieldsACChange(e : CollectionEvent) : void
        {
            if (e.kind != CollectionEventKind.UPDATE)
            {
                dispatchEvent(new Event(Event.CHANGE));
            }
        }

        /** should be set before this component is displayed. */
        public function set hasOnlyOneField(val : Boolean) : void
        {
            _hasOnlyOneField = val;
            if (val == true && fieldsAC.length > 1)
            {
                var f : Field = Field(fieldsAC.getItemAt(0));
                fieldsAC.removeAll();
                fieldsAC.addItem(f);
            }
        }

        public function setData(fields : Vector.<Field>) : void
        {
            const result:Array = [];
            for(var i : int = 0; i < fields.length; i++) {
                result[result.length] = fields[i];
            }
            fieldsAC.removeAll();
            fieldsAC.source = result;
        }

        public function getData() : Vector.<Field>
        {
            const result:Vector.<Field> = new Vector.<Field>;
            const fieldsArr : Array = fieldsAC.toArray();
            for(var i : int = 0; i < fieldsArr.length; i++) {
                result[result.length] = fieldsArr[i];
            }
            return result;
        }

        private function addField() : void
        {
            var cl : Class = DropdownListVO(fieldDropdownList.selectedItem).stardustClass;
            fieldsAC.addItem(new cl());
        }

        private static function ddlLabelFunc(item : Object) : String
        {
            return DropdownListVO(item).name;
        }

        private static function fieldIRFunction(item : Object) : IFactory
        {
            return new ClassFactory(DropdownListVO(fieldDict[item.constructor]).viewClass);
        }
        ]]></fx:Script>

    <s:HGroup width="100%" verticalAlign="middle"
              enabled="{_hasOnlyOneField == false || (_hasOnlyOneField == true &amp;&amp; fieldsAC.length == 0)}">
        <s:DropDownList id="fieldDropdownList" width="160" requireSelection="true"
                        dataProvider="{fieldDDLAC}" labelFunction="ddlLabelFunc"/>
        <s:Button label="Add field" click="addField()"/>
    </s:HGroup>

    <s:DataGroup width="100%" dataProvider="{fieldsAC}" itemRendererFunction="fieldIRFunction">
        <s:layout>
            <s:VerticalLayout gap="4"/>
        </s:layout>
    </s:DataGroup>

</s:VGroup>
