<?xml version="1.0"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:components="com.plumbee.stardust.view.components.*"
                opaqueBackground="0x565656" autoDrawBackground="false" width="100%"
                addedToStage="init()" removedFromStage="destroy()">

    <fx:Script><![CDATA[
		import com.shrimp.extensions.particle.twoD.fields.BitmapField;
		
		import mx.collections.ArrayCollection;
		
		import spark.components.DataGroup;

        private static const channels : ArrayCollection = new ArrayCollection([1, 2, 4]);
        private var fileReference : FileReference = new FileReference();
        [Bindable]
        private var sourceBD : BitmapData;

        private function init() : void
        {
            fileReference.addEventListener(Event.SELECT, fileReference_select);
            fileReference.addEventListener(Event.COMPLETE, fileReference_complete);
        }

        private function destroy() : void
        {
            fileReference.removeEventListener(Event.SELECT, fileReference_select);
            fileReference.removeEventListener(Event.COMPLETE, fileReference_complete);
        }

        private function browseBtn_clickHandler() : void
        {
            var arr : Array = [new FileFilter("Images", ".gif;*.jpeg;*.jpg;*.png")];
            fileReference.browse(arr);
        }

        private function fileReference_select(evt : Event) : void
        {
            fileReference.load();
        }

        private function fileReference_complete(event : Event) : void
        {
            var loader : Loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loader_complete);
            loader.loadBytes(fileReference.data);
        }

        public function loader_complete(event : Event) : void
        {
            var da : BitmapField = data as BitmapField;
            if (da)
            {
                da.update(Bitmap(event.currentTarget.loader.content).bitmapData);
            }
        }

        override public function set data(dat : Object) : void
        {
            super.data = dat;
            var da : BitmapField = data as BitmapField;
            if (da)
            {
                masslessCheckBox.selected = da.massless;
                repeatCheckBox.selected = da.tile;
                maxTextInput.text = da.max.toString();
                xChannelDDL.selectedItem = da.channelX;
                yChannelDDL.selectedItem = da.channelY;
                xscaleTextInput.text = da.scaleX.toString();
                yscaleTextInput.text = da.scaleY.toString();
            }
        }

        private function updateData() : void
        {
            var dat : BitmapField = data as BitmapField;
            dat.massless = masslessCheckBox.selected;
            dat.max = Number(maxTextInput.text);
            dat.channelX = xChannelDDL.selectedItem;
            dat.channelY = yChannelDDL.selectedItem;
            dat.scaleX = Number(xscaleTextInput.text);
            dat.scaleY = Number(yscaleTextInput.text);
            dat.tile = repeatCheckBox.selected;
        }

        private static function formatDDL(o : Object) : String
        {
            if (o == 1)
            {
                return "Red";
            }
            else if (o == 2)
            {
                return "Green";
            }
            return "Blue";
        }
        ]]></fx:Script>

    <s:layout>
        <s:HorizontalLayout verticalAlign="middle"/>
    </s:layout>

    <s:VGroup width="100%">
        <s:HGroup verticalAlign="middle">
            <s:Button label="Set bitmap" click="browseBtn_clickHandler()"/>

            <s:CheckBox label="repeat" id="repeatCheckBox" change="updateData()"
                        toolTip="Repeat the bitmap indefinietly?"/>

            <s:CheckBox label="massless" id="masslessCheckBox" change="updateData()"
                        toolTip="Is the strength of this force influenced by the mass of this particle?"/>

            <s:Label text="max strenght"/>
            <components:CustomNumericStepper id="maxTextInput" stepValue="0.1" width="50" change="updateData()"/>
        </s:HGroup>

        <s:HGroup verticalAlign="middle">
            <s:Label text="horizontal channel"/>
            <s:DropDownList id="xChannelDDL" dataProvider="{channels}" selectedItem="normal" width="80"
                            change="updateData()" labelFunction="formatDDL"/>

            <s:Label text="vertical channel"/>
            <s:DropDownList id="yChannelDDL" dataProvider="{channels}" selectedItem="normal" width="80"
                            change="updateData()" labelFunction="formatDDL"/>
        </s:HGroup>

        <s:HGroup verticalAlign="middle">
            <s:Label text="Bitmap scale: horizontal"/>
            <components:CustomNumericStepper id="xscaleTextInput" stepValue="0.1" width="50" change="updateData()"/>

            <s:Label text="vertical"/>
            <components:CustomNumericStepper id="yscaleTextInput" stepValue="0.1" width="50" change="updateData()"/>
        </s:HGroup>
    </s:VGroup>

    <s:Button label="remove"
              click="DataGroup(owner).dataProvider.removeItemAt( DataGroup(owner).dataProvider.getItemIndex(data) )"/>
</s:ItemRenderer>
